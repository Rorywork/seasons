{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,mBACNC,SAAU,eAuBHE,EAXO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OAAO,yBAAKS,UAAS,yBAAoBH,IACrC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC3BdU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBACVN,EAAMQ,WAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAIED,QCXTG,E,2MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,mFAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2CAK3Cc,QAAQC,IAAI,mD,sCAIZ,OAAIC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAClC,uCAAauB,KAAKb,MAAMC,eAG5BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGjC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAKxB,OACE,6BACGgB,KAAKC,qB,GA9BIC,IAAMC,WAqCxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.402da262.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: \"Let's hit the beach!\",\r\n        iconName: \"sun\"\r\n    },\r\n    winter: {\r\n        text: \"Burr it is cold!\",\r\n        iconName: \"snowflake\"\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 0) {\r\n        return lat > 0 ? \"summer\" : \"winter\";\r\n    } else {\r\n        return lat > 0 ? \"winter\" : \"summer\"\r\n    }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n\r\n    return <div className={`season-display ${season}`}>\r\n        <i className={`icon-left massive ${iconName} icon`} />\r\n        <h1>{text}</h1>\r\n        <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>;\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n};\r\n\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from './Spinner';\r\n\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => this.setState({ lat: position.coords.latitude }),\r\n      err => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"My component was just updated - it rerendered\");\r\n  }\r\n\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.querySelector('#root')\r\n);\r\n\r\n"],"sourceRoot":""}